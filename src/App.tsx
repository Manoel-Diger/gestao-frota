// src/app/tsx (CÃ“DIGO COMPLETO COM MANUTENÃ‡ÃƒO)

import React, { useState, useEffect } from "react";
import { Toaster } from "./components/ui/toaster";
import { Toaster as Sonner } from "./components/ui/sonner";
import { TooltipProvider } from "./components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, useNavigate } from "react-router-dom";
import { LogOut } from "lucide-react";
import { Button } from "./components/ui/button";
import { Input } from "./components/ui/input";
import { Label } from "./components/ui/label";
import { useToast } from "./components/ui/use-toast";
import { supabase } from "./integrations/supabase/client";

// Importe seus componentes de layout e pÃ¡ginas
import { AppLayout } from "./components/layout/AppLayout";
import Dashboard from "./pages/Dashboard";
import Vehicles from "./pages/Vehicles";
import Drivers from "./pages/Drivers";
import Maintenance from "./pages/Maintenance";
import FuelPage from "./pages/Fuel";
import Reports from "./pages/Reports";
import Alerts from "./pages/Alerts";
import NotFound from "./pages/NotFound";

// ðŸ›‘ CORREÃ‡ÃƒO 1: Voltar para importaÃ§Ã£o default. 
// A imagem do Checklist.tsx (387d04.png) mostra 'export default function...'
import ChecklistPage from "./pages/Checklist"; 

const queryClient = new QueryClient();

// Componente Wrapper para lidar com a navegaÃ§Ã£o fora do escopo do BrowserRouter
const AppWrapper = () => (
Â  Â  <BrowserRouter>
Â  Â  Â  Â  <AppContent />
Â  Â  </BrowserRouter>
);

const AppContent = () => {
Â  const [user, setUser] = useState<any>(null);
Â  const [loading, setLoading] = useState(true);
Â  const { toast } = useToast();
Â  const navigate = useNavigate(); 

Â  useEffect(() => {
Â  Â  const { data: authListener } = supabase.auth.onAuthStateChange(
Â  Â  Â  (event, session) => {
Â  Â  Â  Â  setUser(session?.user ?? null);
Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  if (!session && event === 'SIGNED_OUT') {
Â  Â  Â  Â  Â  Â  navigate('/');
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  );
Â  Â  return () => {
Â  Â  Â  authListener.subscription.unsubscribe();
Â  Â  };
Â  }, [navigate]); 

Â  const handleLogin = async (event: React.FormEvent<HTMLFormElement>) => {
Â  Â  event.preventDefault();
Â  Â  setLoading(true);
Â  Â  const form = event.target as HTMLFormElement;
Â  Â  const email = (form.elements.namedItem("email") as HTMLInputElement).value;
Â  Â  const password = (form.elements.namedItem("password") as HTMLInputElement).value;

Â  Â  try {
Â  Â  Â  const { error } = await supabase.auth.signInWithPassword({ email, password });
Â  Â  Â  if (error) throw error;
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Sucesso!",
Â  Â  Â  Â  description: "Login realizado com sucesso.",
Â  Â  Â  });
Â  Â  } catch (error: any) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: error.message,
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const handleLogout = async () => {
Â  Â  try {
Â  Â  Â  setLoading(true);
Â  Â  Â  const { error } = await supabase.auth.signOut();
Â  Â  Â  if (error) throw error;
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Sucesso!",
Â  Â  Â  Â  description: "Logout realizado com sucesso.",
Â  Â  Â  });
Â  Â  } catch (error: any) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: error.message,
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const handleDemoLogin = async () => {
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const { error } = await supabase.auth.signInWithPassword({
Â  Â  Â  Â  email: "demo@exemplo.com",
Â  Â  Â  Â  password: "123456",
Â  Â  Â  });
Â  Â  Â  if (error) throw error;
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Sucesso!",
Â  Â  Â  Â  description: "Login de demonstraÃ§Ã£o realizado com sucesso.",
Â  Â  Â  });
Â  Â  } catch (error: any) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Erro",
Â  Â  Â  Â  description: error.message,
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (loading) {
Â  Â  return (
Â  Â  Â  <div className="flex items-center justify-center min-h-screen">
Â  Â  Â  Â  <p>Verificando sessÃ£o...</p>
Â  Â  Â  Â  <Toaster />
Â  Â  Â  Â  <Sonner />
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (!user) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-4 sm:p-8 flex flex-col items-center justify-center">
Â  Â  Â  Â  <div className="bg-white dark:bg-gray-800 p-6 sm:p-8 rounded-xl shadow-lg w-full max-w-md mx-auto">
Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold mb-4 text-center">FaÃ§a Login para Continuar</h2>
Â  Â  Â  Â  Â  <form onSubmit={handleLogin} className="space-y-4">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <Label htmlFor="email">E-mail</Label>
Â  Â  Â  Â  Â  Â  Â  <Input id="email" type="email" name="email" placeholder="seuemail@exemplo.com" required />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <Label htmlFor="password">Senha</Label>
Â  Â  Â  Â  Â  Â  Â  <Input id="password" type="password" name="password" placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" required />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <Button type="submit" className="w-full" disabled={loading}>
Â  Â  Â  Â  Â  Â  Â  {loading ? "Entrando..." : "Entrar"}
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </form>
Â  Â  Â  Â  Â  <div className="mt-4 text-center">
Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 dark:text-gray-400">Ou, para uma demonstraÃ§Ã£o:</p>
Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  onClick={handleDemoLogin}
Â  Â  Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  Â  Â  className="w-full mt-2"
Â  Â  Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Acessar com UsuÃ¡rio de DemonstraÃ§Ã£o
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <Toaster />
Â  Â  Â  Â  Â  <Sonner />
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <QueryClientProvider client={queryClient}>
Â  Â  Â  <TooltipProvider>
Â  Â  Â  Â  <Toaster />
Â  Â  Â  Â  <Sonner />
Â  Â  Â  Â  <Routes>
Â  Â  Â  Â  Â  Â  {/* ðŸ›‘ CORREÃ‡ÃƒO 2: Removendo as props handleLogout/loading/user do elemento da rota. */}
Â  Â  Â  Â  Â  Â  <Route 
Â  Â  Â  Â  Â  Â  Â  path="/" 
Â  Â  Â  Â  Â  Â  Â  element={<AppLayout />}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <Route index element={<Dashboard />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="vehicles" element={<Vehicles />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="drivers" element={<Drivers />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="maintenance" element={<Maintenance />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="fuel" element={<FuelPage />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="reports" element={<Reports />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="alerts" element={<Alerts />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="checklist" element={<ChecklistPage />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="settings" element={<Dashboard />} />
Â  Â  Â  Â  Â  Â  Â  Â  <Route path="docs" element={<Dashboard />} />
Â  Â  Â  Â  Â  Â  </Route>
Â  Â  Â  Â  Â  Â  <Route path="*" element={<NotFound />} />
Â  Â  Â  Â  </Routes>
Â  Â  Â  </TooltipProvider>
Â  Â  </QueryClientProvider>
Â  );
};

export default AppWrapper;